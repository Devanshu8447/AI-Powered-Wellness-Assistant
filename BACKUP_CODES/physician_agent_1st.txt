import streamlit as st
import os
import json
from dotenv import load_dotenv
from langchain_groq import ChatGroq

# Load environment variables (e.g., API keys from a .env file)
load_dotenv()

# Create the Groq LLM instance
llm = ChatGroq(
    model="llama-3.1-8b-instant",
    temperature=0.7,
    max_retries=2
)

def run_physician_agent():
    st.set_page_config(page_title="General Physician AI")
    st.title("ü©∫ General Physician AI")

    questions = [
        "What symptoms are you experiencing?",
        "How long have you had these symptoms?",
        "Do you have any chronic conditions?",
        "Are you taking any medication?",
        "On a scale of 1 to 10, how severe is it?",
    ]
    responses = {}

    with st.form("physician_form"):
        for q in questions:
            responses[q] = st.text_input(q, key=q)
        submitted = st.form_submit_button("Generate Advice")

    if submitted:
        triage_summary = "\n".join(f"{q} {a}" for q, a in responses.items())

        # Context placeholder for possible RAG search or extra info
        context = ""

        prompt = f"""
You are a safe and helpful virtual general physician.
You cannot provide a medical diagnosis, but you can share general educational information.

Context (trusted medical info): {context}

Patient triage summary:
{triage_summary}

Respond in the following JSON format:
{{
"probable_condition": "Short plain-language guess of the issue (not a diagnosis)",
"self_care_tips": ["tip1", "tip2", "tip3"],
"see_doctor": true or false
}}

Rules:
- Keep it simple and kind.
- Do not use alarming medical jargon.
- If symptoms are severe, set "see_doctor": true.
"""

        try:
            # This returns an AIMessage; extract the text
            ai_response = llm.invoke(prompt)
            if hasattr(ai_response, "content"):
                result_str = ai_response.content
            else:
                result_str = str(ai_response)

            try:
                parsed = json.loads(result_str)
                st.success("Here‚Äôs what I suggest:")
                st.write(f"**Probable condition:** {parsed.get('probable_condition')}")
                st.write("**Self-care tips:**")
                for tip in parsed.get("self_care_tips", []):
                    st.markdown(f"- {tip}")
                if parsed.get("see_doctor"):
                    st.error("‚ö†Ô∏è It‚Äôs advised to see a doctor based on your symptoms.")
            except json.JSONDecodeError:
                st.warning("Could not parse structured output. Showing raw text instead.")
                st.code(result_str)
        except Exception as e:
            st.error(f"Error generating advice: {e}")

if __name__ == "__main__":
    run_physician_agent()


